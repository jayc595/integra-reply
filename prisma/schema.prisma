// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SUBSCRIPTION_PLAN {
  PRO
  TRIAL
  FREE
}

enum INTEGRATION_TYPE {
  INSTAGRAM
  FACEBOOK
  WHATSAPP
  EMAIL
}

enum LISTENER_TYPE {
  KEYWORD_CONTAINS
  PHRASE
  REGEX
}

enum TRIGGER_TYPE {
  WEBHOOK
  ON_SCHEDULE
}

enum ACTION_TYPE {
  DM_USER
  REPLY
  EMAIL
}

enum INTERACTION_TYPE {
  REPLY
  USER_DM
}

model User{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId String @unique
  email String @unique
  firstname String
  lastname String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscription Subscription?
  integrations Integrations[]
  automations Automations[]
}

model Subscription{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan SUBSCRIPTION_PLAN @default(FREE)
}

model Integrations{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?      @db.Uuid
  token       String       @unique
  expiresAt   DateTime?
  profileId String?
  type INTEGRATION_TYPE
}

model Automations{
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String    @default("Untitled Automation")
  createdAt DateTime  @default(now())
  active    Boolean   @default(false)
  userId    String?   @db.Uuid
  listener  Listener?
  trigger Trigger?
  action Action?

}

model Trigger{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation Automations @relation(fields: [automationId], references: [id], onDelete:Cascade)
  automationId String @unique @db.Uuid
  type TRIGGER_TYPE
  integration INTEGRATION_TYPE

}

model Action{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation Automations @relation(fields: [automationId], references: [id], onDelete:Cascade)
  automationId String @unique @db.Uuid
  interaction INTERACTION_TYPE
  action_type ACTION_TYPE
  value String
}

model Listener{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Automation Automations @relation(fields: [automationId], references: [id], onDelete:Cascade)
  automationId String @unique @db.Uuid
  type LISTENER_TYPE
  keywords Keywords?
  phrase Phrase?
  regex Regex?
}

model Keywords{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Listener Listener @relation(fields: [listenerId], references: [id], onDelete:Cascade)
  listenerId String @unique @db.Uuid
  value String
}

model Regex{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Listener Listener @relation(fields: [listenerId], references: [id], onDelete:Cascade)
  listenerId String @unique @db.Uuid
  value String
}

model Phrase{
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Listener Listener @relation(fields: [listenerId], references: [id], onDelete:Cascade)
  listenerId String @unique @db.Uuid
  value String
}